package scheduler;

import java.time.Duration;
import java.util.List;
import java.util.Set;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import exeptions.DeadlineMissedException;
import taskSet.Chunk;
import taskSet.Task;
import taskSet.TaskSet;
import utils.MyClock;
import static org.assertj.core.api.Assertions.*;

public class EDFSchedulerTest {

    private Chunk chunk;

    @Before
    public void setup() {
        this.chunk = new Chunk(0, Duration.ofSeconds(1));
        MyClock.reset();
    }

    @Test
    public void assignPriority() {
        Task task0 = new Task(
            Duration.ofSeconds(10),
            Duration.ofSeconds(8),
            List.of(this.chunk));
        Task task1 = new Task(
            Duration.ofSeconds(5),
            Duration.ofSeconds(4),
            List.of(this.chunk));
        Task task2 = new Task(
            Duration.ofSeconds(15),
            Duration.ofSeconds(11),
            List.of(this.chunk));
        assertThat(task0.getNominalPriority())
            .isEqualTo(task0.getDinamicPriority())
            .isZero();
        assertThat(task1.getNominalPriority())
            .isEqualTo(task1.getDinamicPriority())
            .isZero();
        assertThat(task2.getNominalPriority())
            .isEqualTo(task2.getDinamicPriority())
            .isZero();
        new EDFScheduler(new TaskSet(Set.of(task0, task1, task2)));
        assertThat(task1.getNominalPriority())
            .isEqualTo(task1.getNominalPriority())
            .isEqualTo(5);
        assertThat(task0.getNominalPriority())
            .isEqualTo(task0.getNominalPriority())
            .isEqualTo(7);
        assertThat(task2.getNominalPriority())
            .isEqualTo(task2.getNominalPriority())
            .isEqualTo(9);
    }

    // tested also with the trace generated by the scheduler
    @Test
    public void scheduleWOResourceOK() {
        Task task1 = new Task(
        Duration.ofMillis(6),
        Duration.ofMillis(6),
        List.of(
            new Chunk(1, Duration.ofMillis(1)),
            new Chunk(2, Duration.ofMillis(1))
        ));
        Task task2 = new Task(
            Duration.ofMillis(8),
            Duration.ofMillis(8),
            List.of(
                new Chunk(1, Duration.ofMillis(2))
            ));
        Task task3 = new Task(
            Duration.ofMillis(12),
            Duration.ofMillis(12),
            List.of(
                new Chunk(1, Duration.ofMillis(1)),
                new Chunk(2, Duration.ofMillis(1))
            ));
        TaskSet taskset = new TaskSet(Set.of(task1, task2, task3));
        assertThat(taskset.utilizationFactor())
            .isLessThan(1);
        Scheduler scheduler = new EDFScheduler(taskset);
        assertThatCode(() -> scheduler.schedule())
            .doesNotThrowAnyException();
    }

    // tested also with the trace generated by the scheduler
    @Test
    public void scheduleWOResourceKO() {
        Task task1 = new Task(
        Duration.ofMillis(4),
        Duration.ofMillis(4),
        List.of(
            new Chunk(1, Duration.ofMillis(2)),
            new Chunk(2, Duration.ofMillis(1))
        ));
        Task task2 = new Task(
            Duration.ofMillis(5),
            Duration.ofMillis(5),
            List.of(
                new Chunk(1, Duration.ofMillis(2))
            ));
        Task task3 = new Task(
            Duration.ofMillis(6),
            Duration.ofMillis(6),
            List.of(
                new Chunk(1, Duration.ofMillis(3))
            ));
        TaskSet taskset = new TaskSet(Set.of(task1, task2, task3));
        Scheduler scheduler = new EDFScheduler(taskset);
        assertThatThrownBy(() -> scheduler.schedule())
            .isInstanceOf(DeadlineMissedException.class)
            .hasMessage("Il task " + task3.getId() + " ha superato la deadline");
    }

}